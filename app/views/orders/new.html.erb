<div class="p-6">
  <i class="fa-solid fa-chevron-left"></i>
</div>
<form id="create-order-form" method="POST" name="order" action="/orders" class="flex flex-col p-6 space-y-3 justify-center">
  <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
  <h1 class="text-3xl font-semibold text-gray-700">이메일을 알려주세요</h1>
  <h3 class="text-lg font-base text-gray-500">입력한 이메일 주소로 파일이 전송됩니다</h3>
  <div class="h-1"></div>
  <div class="input-wrapper">
    <label class="input-label">이메일 주소</label>
    <input id="email-input" type="email" name="email" placeholder="example@gmail.com" style="font-size: 1.2rem;">
  </div>
  <div class="h-1"></div>
  <div class="input-wrapper">
    <label for="code" class="input-label">코드</label>
    <input id="code-input" type="text" name="code" placeholder="6자리 인증 코드" style="font-size: 1.2rem;">
  </div>
  <%# Hidden Inputs %>
  <input id="email-authentication-id-input" type="hidden" name="email_authentication_id">
  <input type="hidden" name="product_id" value="<%= @product.id %>">
</form>
<div class="flex-1"></div>
<div id="resend-button-wrapper">
  <div id="resend-button" class="w-full flex flex-row items-center justify-center text-base text-gray-500 font-light mb-4 underline">
    재전송하기
  </div>
</div>
<a
  id="send-email-button"
    style="background-color: var(--primary-color);"
    class="m-6 font-semibold flex flex-col items-center justify-center p-4 text-lg rounded-2xl shadow-lg text-gray-700"
  >
  인증번호 전송
</a>
<a
  id="verify-code-button"
    style="background-color: var(--primary-color);"
    class="m-6 font-semibold flex flex-col items-center justify-center p-4 text-lg rounded-2xl shadow-lg text-gray-700"
  >
  인증번호 확인
</a>
<a
  id="create-order-button"
    style="background-color: var(--primary-color);"
    class="m-6 font-semibold flex flex-col items-center justify-center p-4 text-lg rounded-2xl shadow-lg text-gray-700"
  >
  다음으로
</a>
<script>
  var clientKey = 'test_ck_Kma60RZblrq9JQBeL2ErwzYWBn14'
  var tossPayments = TossPayments(clientKey)

  const Phases = {
    INIT: "INIT",
    EMAIL_SENT: "EMAIL_SENT",
    EMAIL_VERIFIED: "EMAIL_VERIFIED",
    CODE_VERIFIED: "CODE_VERIFIED",
  }

  let currentPhase = Phases.INIT;

  const setEmailAuthenticationId = (emailAuthenticationId) => $("#email-authentication-id-input").val(emailAuthenticationId)
  const getEmailAuthenticationId = (emailAuthenticationId) => $("#email-authentication-id-input").val()
  const getEmail = () => $("#email-input").val()
  const getCode = () => $("#code-input").val()
  const getProductId = () => <%= @product.id %>

  function handleAjaxError(xhr, status) {
    alert(xhr.responseJSON)
  }

  function validateEmail($email) {
   var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
   return emailReg.test( $email );
  }

  function handleSendEmailButtonClick() {
    // 이메일 추출
    const email = getEmail()

    // 이메일 존재 여부 확인
    if (!email) {
      alert("이메일을 입력해주세요")
      return
    }

    if (!validateEmail(email)) {
      alert("형식에 맞는 이메일을 입력해주세요")
      return
    }

    // 인증번호 입력 필드, 재시도 버튼 보여주기

    $.ajax({
      url: "/email_authentication_requests",
      method: "POST",
      dataType: "json",
      data: {
        email: email,
      }
    }).done((responseJSON) => {
        const { email_authentication_id } = responseJSON
        setEmailAuthenticationId(email_authentication_id)
        const code = getCode()
        currentPhase = Phases.EMAIL_SENT
    }).fail((res) => {
      alert(res.responseJSON?.message)
      console.error(res.responseJSON)
      currentPhase = Phases.INIT
    })
  }

  function handleVerifyCodeButtonClick() {
    const emailAuthenticationId = getEmailAuthenticationId()
    const code = getCode()

    if (!emailAuthenticationId) {
      alert("인증번호를 발송해주세요");
      return;
    }

    $.ajax({
      url: "/email_authentication_requests/verify",
      method: "POST",
      dataType: "json",
      data: {
        email_authentication_id: emailAuthenticationId,
        code: code,
      }
    }).done((responseJSON) => {
      currentPhase = Phases.EMAIL_VERIFIED
      alert(responseJSON?.message)
    }).fail((res) => {
      const { responseJSON } = res
      alert(responseJSON?.message)
      console.error(responseJSON)
      currentPhase = Phases.EMAIL_SENT
    })
  }

  function handleCreateOrderButtonClick() {
    $("#create-order-form").submit()
  }

  function handleResendButtonClick() {
    handleSendEmailButtonClick()
  }

  $(document).ready(() => {
    $("#send-email-button").on("click", handleSendEmailButtonClick)
    $("#verify-code-button").on("click", handleVerifyCodeButtonClick)
    $("#create-order-button").on("click", handleCreateOrderButtonClick)
    $("#resend-button").on("click", handleResendButtonClick)
  })
</script>
